import java.util.*;
import java.util.concurrent.*;

class Stock {
    String name;
    double price;
    double volatility;

    public Stock(String name, double price, double volatility) {
        this.name = name;
        this.price = price;
        this.volatility = volatility;
    }

    public void updatePrice() {
        double change = (Math.random() * volatility * 2) - volatility;
        price = Math.max(1, price + change);
    }
}

class Player {
    String name;
    double balance;
    Map<String, Integer> portfolio = new HashMap<>();

    public Player(String name, double balance) {
        this.name = name;
        this.balance = balance;
    }

    public void buyStock(Stock stock, int quantity) {
        double cost = stock.price * quantity;
        if (cost > balance) {
            System.out.println(name + " does not have enough balance to buy " + quantity + " of " + stock.name);
        } else {
            balance -= cost;
            portfolio.put(stock.name, portfolio.getOrDefault(stock.name, 0) + quantity);
            System.out.println(name + " bought " + quantity + " of " + stock.name);
        }
    }

    public void sellStock(Stock stock, int quantity) {
        if (portfolio.getOrDefault(stock.name, 0) < quantity) {
            System.out.println(name + " does not have enough " + stock.name + " to sell.");
        } else {
            balance += stock.price * quantity;
            portfolio.put(stock.name, portfolio.get(stock.name) - quantity);
            System.out.println(name + " sold " + quantity + " of " + stock.name);
        }
    }
}

public class StockMarketGame {
    static List<Stock> stocks = new ArrayList<>();
    static List<Player> players = new ArrayList<>();
    static ScheduledExecutorService marketExecutor = Executors.newScheduledThreadPool(1);

    public static void main(String[] args) {
        stocks.add(new Stock("AAPL", 150, 5));
        stocks.add(new Stock("GOOG", 2800, 50));
        stocks.add(new Stock("TSLA", 900, 20));

        players.add(new Player("Alice", 10000));
        players.add(new Player("Bob", 8000));

        marketExecutor.scheduleAtFixedRate(StockMarketGame::updateMarket, 0, 2, TimeUnit.SECONDS);

        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("Enter command: BUY/SELL/EXIT");
            String command = scanner.next().toUpperCase();
            if (command.equals("EXIT")) break;
            System.out.print("Enter player name: ");
            String playerName = scanner.next();
            System.out.print("Enter stock symbol: ");
            String stockSymbol = scanner.next();
            System.out.print("Enter quantity: ");
            int quantity = scanner.nextInt();

            Player player = players.stream().filter(p -> p.name.equals(playerName)).findFirst().orElse(null);
            Stock stock = stocks.stream().filter(s -> s.name.equalsIgnoreCase(stockSymbol)).findFirst().orElse(null);
            
            if (player == null || stock == null) {
                System.out.println("Invalid player or stock");
                continue;
            }

            if (command.equals("BUY")) {
                player.buyStock(stock, quantity);
            } else if (command.equals("SELL")) {
                player.sellStock(stock, quantity);
            }
        }
        marketExecutor.shutdown();
        scanner.close();
    }

    public static void updateMarket() {
        for (Stock stock : stocks) {
            stock.updatePrice();
            System.out.println("Stock " + stock.name + " updated price: " + stock.price);
        }
    }
}
